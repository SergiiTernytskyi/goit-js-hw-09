{"mappings":"gfAAAA,EAAA,SAEA,IAAMC,EAAUC,SAASC,cAAc,SAMvCF,EAAQG,iBAAiB,UAEzB,SAAsBC,GACpBA,EAAMC,iBACN,IAEuBC,EAAnBF,EAAMG,cADRC,SAAYC,EAAKH,EAALG,MAAOC,EAAIJ,EAAJI,KAAMC,EAAML,EAANK,OAGdF,EAAMG,MACNF,EAAKE,MACHD,EAAOC,K","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from \"notiflix/build/notiflix-notify-aio\";\n\nconst formRef = document.querySelector(\".form\");\n\nlet firstDelay = null;\nlet stepNumber = null;\nlet amountNumber = null;\n\nformRef.addEventListener(\"submit\", onFormSubmit);\n\nfunction onFormSubmit(event) {\n  event.preventDefault();\n  const {\n    elements: { delay, step, amount },\n  } = event.currentTarget;\n\n  firstDelay = delay.value;\n  stepNumber = step.value;\n  amountNumber = amount.value;\n\n  // createPromise(amountNumber, firstDelay)\n  //   .then(({ position, delay }) => {\n  //     console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n  //   })\n  //   .catch(({ position, delay }) => {\n  //     console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n  //   });\n}\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n\n  const calculatedDelay =\n    Number.parseInt(firstDelay) + Number.parseInt(stepNumber);\n\n  console.log(calculatedDelay);\n\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve();\n      } else {\n        reject();\n      }\n    }, delay);\n  });\n}\n"],"names":["parcelRequire","$ce04d3a99e08e73b$var$formRef","document","querySelector","addEventListener","event","preventDefault","_elements","currentTarget","elements","delay","step","amount","value"],"version":3,"file":"03-promises.199e3527.js.map"}